//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  This file is a fork from original Adafruit library
//
//  Uses soft SPI only
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/***************************************************
  This is a library for the Adafruit Thermocouple Sensor w/MAX31855K

  Designed specifically to work with the Adafruit Thermocouple Sensor
  ----> https://www.adafruit.com/products/269

  These displays use SPI to communicate, 3 pins are required to
  interface
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  BSD license, all text above must be included in any redistribution
 ****************************************************/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#pragma once

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#include <Arduino.h>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class myAdafruit_MAX31855 {

  //····················································································································
  //  Constructor
  //····················································································································

  public : myAdafruit_MAX31855 (const uint8_t inSCLK, const uint8_t inCS, const uint8_t inMISO) ;

  //····················································································································
  //  Configuration (soft SPI only)
  //····················································································································

  public : void begin (void) ;

  //····················································································································

  double readInternal(void);
  double readCelsius(void);

  uint8_t readError();

  //····················································································································
  //  Get raw value
  //····················································································································

  public : uint32_t rawValue (void);

  //····················································································································
  //  Private properties
  //····················································································································

  private : const uint8_t mSCLK ;
  private : const uint8_t mCS   ;
  private : const uint8_t mMISO ;

  //····················································································································

} ;

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
